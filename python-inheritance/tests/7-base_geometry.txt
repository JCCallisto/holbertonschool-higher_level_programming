The ``BaseGeometry`` class
============================

Using ``BaseGeometry``
----------------------

Importing the class from the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Creating an instance:
    >>> bg = BaseGeometry()
    >>> print(type(bg))
    <class '7-base_geometry.BaseGeometry'>

Testing area() method (should raise Exception):
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Testing integer_validator() with valid integers:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("age", 1)

Testing integer_validator() with zero (should raise ValueError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

Testing integer_validator() with negative number (should raise ValueError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", -4)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

Testing integer_validator() with string (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", "4")
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Testing integer_validator() with tuple (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Testing integer_validator() with list (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", [3])
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Testing integer_validator() with boolean True (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", True)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Testing integer_validator() with set (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Testing integer_validator() with None (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Testing integer_validator() with only one argument (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Testing integer_validator() with no arguments (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Testing integer_validator() with float (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", 3.14)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Testing area() with no arguments:
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Testing area() with arguments (should raise TypeError):
    >>> bg = BaseGeometry()
    >>> bg.area(5)
    Traceback (most recent call last):
    ...
    TypeError: area() takes 1 positional argument but 2 were given
